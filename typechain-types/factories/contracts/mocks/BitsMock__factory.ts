/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BitsMock,
  BitsMockInterface,
} from "../../../contracts/mocks/BitsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "indexOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "popCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a2d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063058440b51461003b57806306dd84851461006b575b600080fd5b610055600480360381019061005091906108e3565b61009b565b604051610062919061091f565b60405180910390f35b6100856004803603810190610080919061093a565b6100e9565b604051610092919061091f565b60405180910390f35b60006100b167f1fb3ceb2c25bffc60c01b610142565b6100c567ad65f4a2747fa92460c01b610142565b6100d96767474cb6700a2afa60c01b610142565b6100e282610145565b9050919050565b60006100ff674377035cb312bc6f60c01b610142565b6101136733e38a23ba9c9bed60c01b610142565b610127676bc7cebe6d7ecb1160c01b610142565b61013a828461044b90919063ffffffff16565b905092915050565b50565b600061015b67a3526e8f1b78378e60c01b6108a5565b61016f67677325ce35cd3e0660c01b6108a5565b61018367063c47b7a087ea5960c01b6108a5565b600082036101d05761019f67132d4f90e171b1d860c01b6108a5565b6101b367eceaf25cd62ba9e460c01b6108a5565b6101c7678a55da2b116dd20660c01b6108a5565b60009050610446565b6101e467637c509778338a1560c01b6108a5565b6101f867fe91453bde01c5e060c01b6108a5565b7f55555555555555555555555555555555555555555555555555555555555555558260011c167f555555555555555555555555555555555555555555555555555555555555555583160191507f33333333333333333333333333333333333333333333333333333333333333338260021c167f333333333333333333333333333333333333333333333333333333333333333383160191507f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f8260041c167f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f83160191507eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8260081c167eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff83160191507dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8260101c167dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff83160191507bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8260201c167bffffffff00000000ffffffff00000000ffffffff00000000ffffffff831601915077ffffffffffffffff0000000000000000ffffffffffffffff8260401c1677ffffffffffffffff0000000000000000ffffffffffffffff83160191506fffffffffffffffffffffffffffffffff8260801c166fffffffffffffffffffffffffffffffff831601915061042e6753d01c4dbe6ca82f60c01b6108a5565b610442671c5a01bd9815170a60c01b6108a5565b8190505b919050565b60006104616777fa2a78dae20c5d60c01b6108a5565b61047567c31cf75525ae4fa660c01b6108a5565b6104896728cd2313c14c8f2c60c01b6108a5565b61049d670bf8c1e1cff06b9c60c01b6108a5565b60ff8211156104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d8906109d7565b60405180910390fd5b6104f567b252aae53d49f5c760c01b6108a5565b610509675c425022df10405160c01b6108a5565b61051d67c799a78daa8419e060c01b6108a5565b6000830361057557610539674ac0424fc6bac9b360c01b6108a5565b61054d67e307365f6ece6a4e60c01b6108a5565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905061089f565b61058967ebba1a211a5cda7160c01b6108a5565b61059d6705d043bba692ff1160c01b6108a5565b600090506105b56703b8fdecc9058cc560c01b6108a5565b600182019150827f55555555555555555555555555555555555555555555555555555555555555558160011c167f55555555555555555555555555555555555555555555555555555555555555558216017f33333333333333333333333333333333333333333333333333333333333333338160021c167f33333333333333333333333333333333333333333333333333333333333333338216017f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f8160041c167f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f8216017eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8160081c167eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216017dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8160101c167dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216017bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8160201c167bffffffff00000000ffffffff00000000ffffffff00000000ffffffff82160177ffffffffffffffff0000000000000000ffffffffffffffff8160401c1677ffffffffffffffff0000000000000000ffffffffffffffff8216016fffffffffffffffffffffffffffffffff8116808b11156107cb5760808a019950808b039a505b67ffffffffffffffff838b1c169050808b11156107ee5760408a019950808b039a505b63ffffffff848b1c169050808b111561080d5760208a019950808b039a505b61ffff858b1c169050808b111561082a5760108a019950808b039a505b60ff868b1c169050808b11156108465760088a019950808b039a505b600f878b1c169050808b11156108625760048a019950808b039a505b6003888b1c169050808b111561087e5760028a019950808b039a505b6001898b1c169050808b11156108955760018a0199505b5050505050505050505b92915050565b50565b600080fd5b6000819050919050565b6108c0816108ad565b81146108cb57600080fd5b50565b6000813590506108dd816108b7565b92915050565b6000602082840312156108f9576108f86108a8565b5b6000610907848285016108ce565b91505092915050565b610919816108ad565b82525050565b60006020820190506109346000830184610910565b92915050565b60008060408385031215610951576109506108a8565b5b600061095f858286016108ce565b9250506020610970858286016108ce565b9150509250929050565b600082825260208201905092915050565b7f426974733a20696e646578206f7574206f6620626f756e647300000000000000600082015250565b60006109c160198361097a565b91506109cc8261098b565b602082019050919050565b600060208201905081810360008301526109f0816109b4565b905091905056fea2646970667358221220d7c9dee52cf8d7a19bc2e8fc3b2889d03c7a36cc5903528c5629755a3f1c89ba64736f6c63430008100033";

type BitsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BitsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BitsMock__factory extends ContractFactory {
  constructor(...args: BitsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BitsMock> {
    return super.deploy(overrides || {}) as Promise<BitsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BitsMock {
    return super.attach(address) as BitsMock;
  }
  override connect(signer: Signer): BitsMock__factory {
    return super.connect(signer) as BitsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BitsMockInterface {
    return new utils.Interface(_abi) as BitsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BitsMock {
    return new Contract(address, _abi, signerOrProvider) as BitsMock;
  }
}
