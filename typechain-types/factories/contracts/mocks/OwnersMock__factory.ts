/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OwnersMock,
  OwnersMockInterface,
} from "../../../contracts/mocks/OwnersMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "transferTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610af9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e81aaea146100465780636352211e14610062578063d4822fbf14610092575b600080fd5b610060600480360381019061005b919061089f565b6100ae565b005b61007c600480360381019061007791906108f2565b610107565b604051610089919061092e565b60405180910390f35b6100ac60048036038101906100a79190610949565b610160565b005b6100c267aea345fe8cd770a060c01b6101b6565b6100d6678db1644eb0bffbf160c01b6101b6565b6100ea67222bd1492a126fb060c01b6101b6565b61010283838360006101b9909392919063ffffffff16565b505050565b600061011d67d14eabd23cfc752660c01b6101b6565b61013167f51bd5e8cdb4fe9160c01b6101b6565b61014567f7d76f2481ec924360c01b6101b6565b61015982600061020a90919063ffffffff16565b9050919050565b61017467ca081ec5e47d207f60c01b6101b6565b610188678b356de4f903caed60c01b6101b6565b61019c67b2ee782f18c7149960c01b6101b6565b6101b28282600061034d9092919063ffffffff16565b5050565b50565b6101cd673e1f8025577e218960c01b61060a565b6101e167a98f0523193e4c9360c01b61060a565b6101eb838261060d565b8460000160008481526020019081526020016000208190555050505050565b600061022067b8bdd179f8dc494160c01b61060a565b610234672c9599bde447891660c01b61060a565b610248675d860381309dcafa60c01b61060a565b61025c67cd27eef18233859d60c01b61060a565b6000829050610275673f7b9ac4efd7ff4160c01b61060a565b5b6000806102978660000160008581526020019081526020016000205461071d565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156102d9575084818401115b156102e957819350505050610347565b8260019003925050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036102765761032d67d7c0b0376206359060c01b61060a565b610341671c9d4833bf0331f660c01b61060a565b60009150505b92915050565b6103616762a6ae2968bc41b960c01b61060a565b61037567ed534eb69bddf0d660c01b61060a565b61038967d27acf75cf3a5d6460c01b61060a565b6000806103aa8560000160008681526020019081526020016000205461071d565b915091506103c267c4d9d9a2c019617060c01b61060a565b6103cd83600161060d565b856000016000868152602001908152602001600020819055506103fa67da6ee0570af12b9360c01b61060a565b61040e67872265f37641c6d860c01b61060a565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614801561045a57506104596767fe898d90775f7260c01b610787565b5b80610482575060018111158015610481575061048067723bd1d64682ec9260c01b610787565b5b5b156104ca5761049b677e35a448e91fc7d360c01b61060a565b6104af6762834535b94f219560c01b61060a565b6104c3670ac538fc981065f960c01b61060a565b5050610605565b6104de67f1aa59774f860c8860c01b61060a565b6104f2671927c9c1bc36eadc60c01b61060a565b610506672800ab13e61fb98a60c01b61060a565b600060018561051591906109b8565b905061052b67f879441e0b6b8bea60c01b61060a565b61053f67db737588d516c0d060c01b61060a565b600073ffffffffffffffffffffffffffffffffffffffff1661057587600001600084815260200190815260200160002054610792565b73ffffffffffffffffffffffffffffffffffffffff16036105ec576105a46768a0bf225a347d8c60c01b61060a565b6105b8673dee6db48be92ed860c01b61060a565b6105ce836001846105c991906109ec565b61060d565b86600001600083815260200190815260200160002081905550610601565b61060067f677b5c5df73cb4160c01b61060a565b5b5050505b505050565b50565b60006106236780b7fb26af60e43460c01b61060a565b61063767c5bdf9f5538f8c3060c01b61060a565b61064b67b1449e92982ffffd60c01b61060a565b61065f6788a51c51946168bc60c01b61060a565b8163ffffffff801610156106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f90610aa3565b60405180910390fd5b6106bc67cd719372def8c13460c01b61060a565b6106d067d7de5a2b9b483ca260c01b61060a565b6106e46711e995a6e302049a60c01b61060a565b6106f867d165a3f65918b06b60c01b61060a565b8160208473ffffffffffffffffffffffffffffffffffffffff16901b17905092915050565b600080610734670206d34d33f9738b60c01b61060a565b610748675de094418915482560c01b61060a565b61075c67b95b1dcc980c9bd160c01b61060a565b602083901c915061077767df01bf58c7235d0460c01b61060a565b63ffffffff801683169050915091565b600060019050919050565b60006107a8672711af33e4dc19e660c01b61060a565b6107bc6736eb0e5a6412a18a60c01b61060a565b6107d06735699c3406f9dc0d60c01b61060a565b6107e467bcaba42dd8ec460160c01b61060a565b73ffffffffffffffffffffffffffffffffffffffff602083901c169050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108368261080b565b9050919050565b6108468161082b565b811461085157600080fd5b50565b6000813590506108638161083d565b92915050565b6000819050919050565b61087c81610869565b811461088757600080fd5b50565b60008135905061089981610873565b92915050565b6000806000606084860312156108b8576108b7610806565b5b60006108c686828701610854565b93505060206108d78682870161088a565b92505060406108e88682870161088a565b9150509250925092565b60006020828403121561090857610907610806565b5b60006109168482850161088a565b91505092915050565b6109288161082b565b82525050565b6000602082019050610943600083018461091f565b92915050565b600080604083850312156109605761095f610806565b5b600061096e8582860161088a565b925050602061097f85828601610854565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c382610869565b91506109ce83610869565b92508282019050808211156109e6576109e5610989565b5b92915050565b60006109f782610869565b9150610a0283610869565b9250828203905081811115610a1a57610a19610989565b5b92915050565b600082825260208201905092915050565b7f455243373231424f204f776e6572733a20636f756e74206d757374206265206c60008201527f657373207468616e20325e333200000000000000000000000000000000000000602082015250565b6000610a8d602d83610a20565b9150610a9882610a31565b604082019050919050565b60006020820190508181036000830152610abc81610a80565b905091905056fea2646970667358221220cc29d9a2be7edceeed8f78fe04b30b57fb5f843a69b3481083de5b9c70688ac364736f6c63430008100033";

type OwnersMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnersMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnersMock__factory extends ContractFactory {
  constructor(...args: OwnersMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnersMock> {
    return super.deploy(overrides || {}) as Promise<OwnersMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnersMock {
    return super.attach(address) as OwnersMock;
  }
  override connect(signer: Signer): OwnersMock__factory {
    return super.connect(signer) as OwnersMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnersMockInterface {
    return new utils.Interface(_abi) as OwnersMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnersMock {
    return new Contract(address, _abi, signerOrProvider) as OwnersMock;
  }
}
