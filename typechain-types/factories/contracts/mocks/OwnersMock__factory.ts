/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OwnersMock,
  OwnersMockInterface,
} from "../../../contracts/mocks/OwnersMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "transferTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061043e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e81aaea146100465780636352211e1461005b578063d4822fbf14610097575b600080fd5b61005961005436600461033b565b6100aa565b005b61006e61006936600461036e565b6100bc565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100a5366004610387565b6100ce565b6100b760008484846100de565b505050565b60006100c881836100ff565b92915050565b6100da60008383610187565b5050565b6100e88382610253565b600092835260209490945250604090209190915550565b6000815b600081815260208581526040909120549081901c9063ffffffff1673ffffffffffffffffffffffffffffffffffffffff821615801590610144575084818401115b15610153575091506100c89050565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190610103575060009392505050565b600082815260208481526040909120549081901c9063ffffffff166101ad836001610253565b60008581526020879052604090205573ffffffffffffffffffffffffffffffffffffffff821615806101e0575060018111155b156101ec575050505050565b60006101f98560016103e2565b600081815260208881526040909120549192501c73ffffffffffffffffffffffffffffffffffffffff1661024b5761023b836102366001856103f5565b610253565b6000828152602088905260409020555b505050505050565b600063ffffffff8211156102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243373231424f204f776e6572733a20636f756e74206d757374206265206c60448201527f657373207468616e20325e333200000000000000000000000000000000000000606482015260840160405180910390fd5b5060209190911b77ffffffffffffffffffffffffffffffffffffffff00000000161790565b803573ffffffffffffffffffffffffffffffffffffffff8116811461033657600080fd5b919050565b60008060006060848603121561035057600080fd5b61035984610312565b95602085013595506040909401359392505050565b60006020828403121561038057600080fd5b5035919050565b6000806040838503121561039a57600080fd5b823591506103aa60208401610312565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156100c8576100c86103b3565b818103818111156100c8576100c86103b356fea2646970667358221220385781064568cb404bb4e88015367c0581cd1ab774117f2896eafef9849339c964736f6c63430008100033";

type OwnersMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnersMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnersMock__factory extends ContractFactory {
  constructor(...args: OwnersMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnersMock> {
    return super.deploy(overrides || {}) as Promise<OwnersMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnersMock {
    return super.attach(address) as OwnersMock;
  }
  override connect(signer: Signer): OwnersMock__factory {
    return super.connect(signer) as OwnersMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnersMockInterface {
    return new utils.Interface(_abi) as OwnersMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnersMock {
    return new Contract(address, _abi, signerOrProvider) as OwnersMock;
  }
}
