/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CounterMock,
  CounterMockInterface,
} from "../../../contracts/mocks/CounterMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "current",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b67b20f5afb4e2a7cb860c01b61007760201b60201c565b610044667ce56186e6a0a460c01b61007760201b60201c565b61005e6793fda1514482232660c01b61007760201b60201c565b610072600061007a60201b6101151760201c565b6100dd565b50565b61009467a0631d78ad87a04d60c01b6100da60201b60201c565b6100ae67048eb39023f017b160c01b6100da60201b60201c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816000018190555050565b50565b6106e3806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637cf5dab01461003b5780639fa6a6e314610057575b600080fd5b610055600480360381019061005091906104e4565b610075565b005b61005f6100c8565b60405161006c9190610520565b60405180910390f35b61008967e20fda697cd9f25460c01b610169565b61009d67b78942fb5423b29b60c01b610169565b6100b167018a431882daf60d60c01b610169565b6100c581600061016c90919063ffffffff16565b50565b60006100de67bad900236eb2804860c01b610169565b6100f2675fb5a801df2069d260c01b610169565b61010667dd82c9b56420473d60c01b610169565b61011060006103b6565b905090565b61012967a0631d78ad87a04d60c01b610494565b61013d67048eb39023f017b160c01b610494565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816000018190555050565b50565b6101806740382f6aba734f4f60c01b610494565b61019467235ae34f4e07dac160c01b610494565b6101a8676a1af9688bd1074a60c01b610494565b6101bc6722838c17681d081860c01b610494565b600081116101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f6906105be565b60405180910390fd5b610213671e6192c51a95de2f60c01b610494565b6102276784c9ca5b463b331360c01b610494565b61023b6755510aaf17139aed60c01b610494565b600082600001549050610258678b1f7b6e7603974960c01b610494565b61026c673a22f0ef5dd64d1860c01b610494565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821480156102ad57506102ac67643c28d1fef675d360c01b610497565b5b806102c857506102c767f12b914aa79692f960c01b6104a2565b5b6102dd5782826102d8919061060d565b6102df565b825b90506102f56797fc3fb34b1d400560c01b610494565b61030967bcd48b4d7703597660c01b610494565b61031d67c8a9db2f6f32347160c01b610494565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361037f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103769061068d565b60405180910390fd5b610393671becae5b496dc04f60c01b610494565b6103a767306ba3d7a5d5f8e960c01b610494565b80846000018190555050505050565b60006103cc67ae9cd5fec39d138c60c01b610494565b6103e067369d8f519f8e418660c01b610494565b6103f467f073118d36d54b1e60c01b610494565b6000826000015490506104116758fa46e69746c1cd60c01b610494565b610425672c1a73e3beb2b92260c01b610494565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811480156104645750610463674b6dc8b379c58be060c01b610497565b5b8061047f575061047e67f72c1a7aa745ecf260c01b6104a2565b5b610489578061048c565b60005b915050919050565b50565b600060019050919050565b6000919050565b600080fd5b6000819050919050565b6104c1816104ae565b81146104cc57600080fd5b50565b6000813590506104de816104b8565b92915050565b6000602082840312156104fa576104f96104a9565b5b6000610508848285016104cf565b91505092915050565b61051a816104ae565b82525050565b60006020820190506105356000830184610511565b92915050565b600082825260208201905092915050565b7f436f756e7465723a20636f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006105a860258361053b565b91506105b38261054c565b604082019050919050565b600060208201905081810360008301526105d78161059b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610618826104ae565b9150610623836104ae565b925082820190508082111561063b5761063a6105de565b5b92915050565b7f436f756e7465723a206f766572666c6f77000000000000000000000000000000600082015250565b600061067760118361053b565b915061068282610641565b602082019050919050565b600060208201905081810360008301526106a68161066a565b905091905056fea2646970667358221220d6a6670913b1099a18dc9bef518ead67fc6d969c63eb742d3df9679b370df4c664736f6c63430008100033";

type CounterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CounterMock__factory extends ContractFactory {
  constructor(...args: CounterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CounterMock> {
    return super.deploy(overrides || {}) as Promise<CounterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CounterMock {
    return super.attach(address) as CounterMock;
  }
  override connect(signer: Signer): CounterMock__factory {
    return super.connect(signer) as CounterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterMockInterface {
    return new utils.Interface(_abi) as CounterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CounterMock {
    return new Contract(address, _abi, signerOrProvider) as CounterMock;
  }
}
