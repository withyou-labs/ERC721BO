/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AssetsMock,
  AssetsMockInterface,
} from "../../../contracts/mocks/AssetsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "page",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "setRange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "unset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "unsetRange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061065a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063623a564b11610050578063623a564b146100b2578063993b6388146100c5578063b464631b146100eb57600080fd5b806318e8ec49146100775780633825d8281461008c5780634d7740df1461009f575b600080fd5b61008a610085366004610572565b61010e565b005b61008a61009a366004610572565b61011e565b61008a6100ad36600461059c565b61012a565b61008a6100c036600461059c565b61013c565b6100d86100d3366004610572565b610149565b6040519081526020015b60405180910390f35b6100fe6100f9366004610572565b61015f565b60405190151581526020016100e2565b61011a6000838361016c565b5050565b61011a600083836101a4565b61013760008484846101db565b505050565b6101376000848484610302565b6000610156818484610424565b90505b92915050565b600061015681848461044a565b600061017c600883901c84610481565b60009081526020949094525060409092208054600160ff9094169390931b1990921690915550565b60006101b4600883901c84610481565b60009081526020949094525060409092208054600160ff9094169390931b90921790915550565b80156102fc57600060016101ef83856105fe565b6101f99190610611565b9050600883811c9082901c8082146102995760006102178388610481565b905060006102258389610481565b9050815b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82820361025a5760ff80881690031c5b83820361026f57600160ff8a1681901b909103015b600082815260208c90526040902080549119909116905560010181811115610229575050506102f8565b600160ff86811682901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8287169092039190911c030180198860006102df868b610481565b8152602081019190915260400160002080549091169055505b5050505b50505050565b80156102fc576000600161031683856105fe565b6103209190610611565b9050600883811c9082901c8082146103be57600061033e8388610481565b9050600061034c8389610481565b9050815b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8282036103815760ff80881690031c5b83820361039657600160ff8a1681901b909103015b600082815260208c9052604090208054909117905560010181811115610350575050506102f8565b600160ff86811682901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8287169092039190911c030180886000610403868b610481565b81526020810191909152604001600020805490911790555050505050505050565b600083816104328486610481565b81526020019081526020016000205490509392505050565b60008061045b600884901c85610481565b600090815260208690526040902054600160ff85169190911c8116149150509392505050565b600063ffffffff83111561051b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f455243373231424f204173736574733a20706167654e6f206d7573742062652060448201527f6c657373207468616e20325e3332000000000000000000000000000000000000606482015260840160405180910390fd5b5077ffffffffffffffffffffffffffffffffffffffff00000000602082901b1663ffffffff83161792915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461056d57600080fd5b919050565b6000806040838503121561058557600080fd5b61058e83610549565b946020939093013593505050565b6000806000606084860312156105b157600080fd5b6105ba84610549565b95602085013595506040909401359392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610159576101596105cf565b81810381811115610159576101596105cf56fea264697066735822122003b0d7cd7bb57c282041f765ce74af0da089f91a2c9294135b418164a25e0f2764736f6c63430008100033";

type AssetsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetsMock__factory extends ContractFactory {
  constructor(...args: AssetsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetsMock> {
    return super.deploy(overrides || {}) as Promise<AssetsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetsMock {
    return super.attach(address) as AssetsMock;
  }
  override connect(signer: Signer): AssetsMock__factory {
    return super.connect(signer) as AssetsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetsMockInterface {
    return new utils.Interface(_abi) as AssetsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetsMock {
    return new Contract(address, _abi, signerOrProvider) as AssetsMock;
  }
}
