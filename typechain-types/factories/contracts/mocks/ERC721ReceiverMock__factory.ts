/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721ReceiverMock,
  ERC721ReceiverMockInterface,
} from "../../../contracts/mocks/ERC721ReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "retval",
        type: "bytes4",
      },
      {
        internalType: "enum ERC721ReceiverMock.Error",
        name: "error",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162000ad338038062000ad3833981810160405281019062000037919062000198565b62000053677febfcab8cd14d9a60c01b6200010b60201b60201c565b6200006f67f548dcce0f0315af60c01b6200010b60201b60201c565b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166080817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050620000d167ded73c022c0fa34760c01b6200010b60201b60201c565b806003811115620000e757620000e6620001df565b5b60a0816003811115620000ff57620000fe620001df565b5b8152505050506200020e565b50565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200014a8162000113565b81146200015657600080fd5b50565b6000815190506200016a816200013f565b92915050565b600481106200017e57600080fd5b50565b600081519050620001928162000170565b92915050565b60008060408385031215620001b257620001b16200010e565b5b6000620001c28582860162000159565b9250506020620001d58582860162000181565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a051610892620002416000396000818160b40152818161019f0152610253015260006103bc01526108926000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004a600480360381019061004591906105d6565b610060565b6040516100579190610694565b60405180910390f35b600061007667c6723ee98b01387860c01b6103e5565b61008a6744f995784c5af11660c01b6103e5565b61009e672a9e6ef6e241d0bc60c01b6103e5565b600160038111156100b2576100b16106af565b5b7f000000000000000000000000000000000000000000000000000000000000000060038111156100e5576100e46106af565b5b03610161576100fe6786c23547b31046a460c01b6103e5565b61011267fefba79f5924902a60c01b6103e5565b6101266778c50a3b24cffb0460c01b6103e5565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101589061073b565b60405180910390fd5b61017567c75c7514f6b5c9b460c01b6103e5565b61018967c2b0cb5e0ecb588860c01b6103e5565b6002600381111561019d5761019c6106af565b5b7f000000000000000000000000000000000000000000000000000000000000000060038111156101d0576101cf6106af565b5b03610216576101e9679d5636a02eefa6f160c01b6103e5565b6101fd67380a776e835a8ff260c01b6103e5565b61021167c7873cf7fe86c39f60c01b6103e5565b600080fd5b61022a6701a1fa4ab8a8b76a60c01b6103e5565b61023e6725c3bdb6999e17f160c01b6103e5565b600380811115610251576102506106af565b5b7f00000000000000000000000000000000000000000000000000000000000000006003811115610284576102836106af565b5b036102f05761029d67e3c978dc258dc16e60c01b6103e5565b6102b167a5eeb6eeba159def60c01b6103e5565b6102c567900533d44c76665260c01b6103e5565b60008060006102d4919061078a565b90506102ea67ba3954de9595110860c01b6103e5565b50610305565b61030467a63c6a2717a566e960c01b6103e5565b5b610319673ad1ae841dd2e44a60c01b6103e5565b61032d67442e3c3cb53c051e60c01b6103e5565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ed9411ae77b2bacabe5cbe62a2abdbeb78992a0182c6f3c83e0029c7615d6b68560405161038a919061083a565b60405180910390a46103a667750152136b46c4e960c01b6103e5565b6103ba6704558f3372d946c160c01b6103e5565b7f00000000000000000000000000000000000000000000000000000000000000009050949350505050565b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610427826103fc565b9050919050565b6104378161041c565b811461044257600080fd5b50565b6000813590506104548161042e565b92915050565b6000819050919050565b61046d8161045a565b811461047857600080fd5b50565b60008135905061048a81610464565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104e38261049a565b810181811067ffffffffffffffff82111715610502576105016104ab565b5b80604052505050565b60006105156103e8565b905061052182826104da565b919050565b600067ffffffffffffffff821115610541576105406104ab565b5b61054a8261049a565b9050602081019050919050565b82818337600083830152505050565b600061057961057484610526565b61050b565b90508281526020810184848401111561059557610594610495565b5b6105a0848285610557565b509392505050565b600082601f8301126105bd576105bc610490565b5b81356105cd848260208601610566565b91505092915050565b600080600080608085870312156105f0576105ef6103f2565b5b60006105fe87828801610445565b945050602061060f87828801610445565b93505060406106208782880161047b565b925050606085013567ffffffffffffffff811115610641576106406103f7565b5b61064d878288016105a8565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61068e81610659565b82525050565b60006020820190506106a96000830184610685565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f45524337323152656365697665724d6f636b3a20726576657274696e67000000600082015250565b6000610725601d836106de565b9150610730826106ef565b602082019050919050565b6000602082019050818103600083015261075481610718565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107958261045a565b91506107a08361045a565b9250826107b0576107af61075b565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107f55780820151818401526020810190506107da565b60008484015250505050565b600061080c826107bb565b61081681856107c6565b93506108268185602086016107d7565b61082f8161049a565b840191505092915050565b600060208201905081810360008301526108548184610801565b90509291505056fea2646970667358221220638a5bafd681d867744a215a9ac5cd0bf4cdbf3729c4d3e8905f318ac12377d164736f6c63430008100033";

type ERC721ReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721ReceiverMock__factory extends ContractFactory {
  constructor(...args: ERC721ReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    retval: PromiseOrValue<BytesLike>,
    error: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721ReceiverMock> {
    return super.deploy(
      retval,
      error,
      overrides || {}
    ) as Promise<ERC721ReceiverMock>;
  }
  override getDeployTransaction(
    retval: PromiseOrValue<BytesLike>,
    error: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(retval, error, overrides || {});
  }
  override attach(address: string): ERC721ReceiverMock {
    return super.attach(address) as ERC721ReceiverMock;
  }
  override connect(signer: Signer): ERC721ReceiverMock__factory {
    return super.connect(signer) as ERC721ReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721ReceiverMockInterface {
    return new utils.Interface(_abi) as ERC721ReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721ReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721ReceiverMock;
  }
}
